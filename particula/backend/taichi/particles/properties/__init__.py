import importlib
import warnings


def _optional_import(module: str, names: tuple[str, ...]) -> None:
    """Import *module* and re-export *names* – ignore if module is absent."""
    try:
        mod = importlib.import_module(f".{module}", __name__)
    except ModuleNotFoundError:
        warnings.warn(
            f"Skipped optional Taichi property module '{module}'.",
            RuntimeWarning,
            stacklevel=2,
        )
        return
    globals().update({name: getattr(mod, name) for name in names})

_optional_import(
    "ti_aerodynamic_mobility_module",
    (
        "ti_get_aerodynamic_mobility",
        "kget_aerodynamic_mobility",
        "fget_aerodynamic_mobility",
    ),
)
_optional_import(
    "ti_aerodynamic_length_module",
    (
        "ti_get_aerodynamic_length",
        "kget_aerodynamic_length",
        "fget_aerodynamic_length",
    ),
)
_optional_import(
    "ti_convert_mass_concentration_module",
    (
        "ti_get_mole_fraction_from_mass",
        "kget_mole_fraction_from_mass",
        "fget_mole_single",
        "ti_get_volume_fraction_from_mass",
        "kget_volume_fraction_from_mass",
        "fget_volume_single",
    ),
)
_optional_import(
    "ti_convert_mole_fraction_module",
    (
        "ti_get_mass_fractions_from_moles",
        "kget_mass_fractions_1d",
        "kget_mass_fractions_2d",
        "fget_mass_fraction",
    ),
)
_optional_import(
    "ti_convert_size_distribution_module",
    (
        "ti_get_distribution_in_dn",
        "kget_distribution_in_dn",
        "fget_distribution_in_dn",
        "ti_get_pdf_distribution_in_pmf",
        "kget_pdf_distribution_in_pmf",
        "fget_pdf_distribution_in_pmf",
    ),
)
_optional_import(
    "ti_convert_kappa_volumes",
    (
        "ti_get_solute_volume_from_kappa",
        "kget_solute_volume_from_kappa",
        "fget_solute_volume_from_kappa",
        "ti_get_water_volume_from_kappa",
        "kget_water_volume_from_kappa",
        "fget_water_volume_from_kappa",
        "ti_get_kappa_from_volumes",
        "kget_kappa_from_volumes",
        "fget_kappa_from_volumes",
        "ti_get_water_volume_in_mixture",
        "kget_water_volume_in_mixture",
        "fget_water_volume_in_mixture",
    ),
)
_optional_import(
    "ti_vapor_correction_module",
    (
        "ti_get_vapor_transition_correction",
        "kget_vapor_transition_correction",
        "fget_vapor_transition_correction",
    ),
)
_optional_import(
    "ti_stokes_number_module",
    (
        "ti_get_stokes_number",
        "kget_stokes_number",
        "fget_stokes_number",
    ),
)
_optional_import(
    "ti_knudsen_number_module",
    (
        "ti_get_knudsen_number",
        "kget_knudsen_number",
        "fget_knudsen_number",
    ),
)
_optional_import(
    "ti_lognormal_size_distribution_module",
    (
        "ti_get_lognormal_pdf_distribution",
        "ti_get_lognormal_pmf_distribution",
    ),
)
_optional_import(
    "ti_kelvin_effect_module",
    (
        "ti_get_kelvin_radius",
        "kget_kelvin_radius",
        "fget_kelvin_radius",
        "ti_get_kelvin_term",
        "kget_kelvin_term",
        "fget_kelvin_term",
    ),
)
_optional_import(
    "ti_special_functions",
    (
        "ti_get_debye_function",
        "kget_debye_function",
        "fget_debye_function",
    ),
)
_optional_import(
    "ti_slip_correction_module",
    (
        "ti_get_cunningham_slip_correction",
        "kget_cunningham_slip_correction",
        "fget_cunningham_slip_correction",
    ),
)
_optional_import(
    "ti_friction_factor_module",
    (
        "ti_get_friction_factor",
        "kget_friction_factor",
        "fget_friction_factor",
    ),
)
_optional_import(
    "ti_settling_velocity",
    (
        "ti_get_particle_settling_velocity",
        "kget_particle_settling_velocity",
        "fget_particle_settling_velocity",
    ),
)
_optional_import(
    "ti_reynolds_number_module",
    (
        "ti_get_particle_reynolds_number",
        "kget_particle_reynolds_number",
        "fget_particle_reynolds_number",
    ),
)
_optional_import(
    "ti_partial_pressure_module",
    (
        "ti_get_partial_pressure_delta",
        "kget_partial_pressure_delta",
        "fget_partial_pressure_delta",
    ),
)
_optional_import(
    "ti_mean_thermal_speed_module",
    (
        "ti_get_mean_thermal_speed",
        "kget_mean_thermal_speed",
        "fget_mean_thermal_speed",
    ),
)
_optional_import(
    "ti_mixing_state_index_module",
    (
        "ti_get_mixing_state_index",
        "kget_mixing_state_index",
        "fget_mixing_state_index",
    ),
)
_optional_import(
    "ti_diffusive_knudsen_module",
    (
        "ti_get_diffusive_knudsen_number",
        "kget_diffusive_knudsen_number",
        "fget_diffusive_knudsen_number",
    ),
)
_optional_import(
    "ti_activity_module",
    (
        "ti_get_ideal_activity_molar",
        "kget_ideal_activity_molar",
        "ti_get_ideal_activity_volume",
        "kget_ideal_activity_volume",
        "ti_get_ideal_activity_mass",
        "kget_ideal_activity_mass",
        "ti_get_kappa_activity",
        "kget_kappa_activity",
        "ti_get_surface_partial_pressure",
        "kget_surface_partial_pressure",
        "fget_surface_partial_pressure",
    ),
)
_optional_import(
    "ti_collision_radius_module",
    (
        "ti_get_collision_radius_mg1988",
        "ti_get_collision_radius_sr1992",
        "ti_get_collision_radius_mzg2002",
        "ti_get_collision_radius_tt2012",
        "ti_get_collision_radius_wq2022_rg",
        "ti_get_collision_radius_wq2022_rg_df",
        "ti_get_collision_radius_wq2022_rg_df_k0",
        "ti_get_collision_radius_wq2022_rg_df_k0_a13",
    ),
)
# ---------------------------------------------------------------------- #
#  Public export list – all symbols starting with ti_/kget_/fget_        #
# ---------------------------------------------------------------------- #
__all__: list[str] = [
    name for name in globals()
    if name.startswith(("ti_get_", "kget_", "fget_"))
]
